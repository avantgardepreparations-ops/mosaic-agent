/**
 * Test des Agents Multi-Agent
 * 
 * ATTENTION: NE JAMAIS MELANGER AVEC MOSAICMIND
 * Tests strictement s√©par√©s de MOSAICMIND
 */

const MultiAgentOrchestrator = require('./agents/orchestrator/index');

async function testMultiAgentSystem() {
    console.log('üß™ TESTS DU SYST√àME MULTI-AGENT');
    console.log('=' .repeat(50));
    
    try {
        // Cr√©ation de l'orchestrateur
        console.log('\nüìã Initialisation de l\'orchestrateur...');
        const orchestrator = new MultiAgentOrchestrator({
            enableLogging: true,
            enableMetrics: true
        });
        
        // V√©rification du statut
        console.log('\nüìä Statut de l\'orchestrateur:');
        const status = orchestrator.getStatus();
        console.log(`- Orchestrateur: ${status.name} (${status.status})`);
        console.log(`- Agents: ${Object.keys(status.agents).length} agents initialis√©s`);
        console.log(`- S√©paration valid√©e: ${status.separationValidated ? '‚úÖ' : '‚ùå'}`);
        
        // Test avec diff√©rents types de prompts
        const testCases = [
            {
                name: 'Prompt de Codage JavaScript',
                prompt: 'Cr√©er une fonction JavaScript qui valide une adresse email',
                context: { userLevel: 'intermediate', domain: 'web' }
            },
            {
                name: 'Prompt d\'Explication',
                prompt: 'Expliquer comment fonctionne le garbage collection en JavaScript',
                context: { userLevel: 'beginner' }
            },
            {
                name: 'Prompt d\'Analyse',
                prompt: 'Analyser les avantages et inconv√©nients de React vs Vue.js',
                context: { userLevel: 'advanced', domain: 'web' }
            }
        ];
        
        for (let i = 0; i < testCases.length; i++) {
            const testCase = testCases[i];
            console.log(`\nüî¨ Test ${i + 1}: ${testCase.name}`);
            console.log(`Prompt: "${testCase.prompt}"`);
            
            try {
                const startTime = Date.now();
                const result = await orchestrator.processRequest(testCase.prompt, testCase.context);
                const processingTime = Date.now() - startTime;
                
                console.log(`‚úÖ Succ√®s en ${processingTime}ms`);
                console.log(`- ID Requ√™te: ${result.requestId}`);
                console.log(`- √âtapes compl√©t√©es: ${result.orchestration.metrics.successfulSteps}/${result.orchestration.metrics.totalSteps}`);
                console.log(`- Confiance finale: ${(result.result.analysis.confidence * 100).toFixed(1)}%`);
                console.log(`- Score qualit√©: ${(result.result.quality.score * 100).toFixed(1)}%`);
                console.log(`- Longueur r√©ponse: ${result.result.response.length} caract√®res`);
                
                // Afficher un extrait de la r√©ponse
                const responsePreview = result.result.response.substring(0, 200);
                console.log(`- Aper√ßu: "${responsePreview}${result.result.response.length > 200 ? '...' : ''}"`);
                
            } catch (error) {
                console.error(`‚ùå √âchec du test: ${error.message}`);
            }
        }
        
        // Affichage des m√©triques finales
        console.log('\nüìà M√âTRIQUES FINALES');
        console.log('=' .repeat(30));
        const finalStatus = orchestrator.getStatus();
        console.log(`- Requ√™tes totales: ${finalStatus.metrics.totalRequests}`);
        console.log(`- Succ√®s: ${finalStatus.metrics.successfulRequests}`);
        console.log(`- √âchecs: ${finalStatus.metrics.failedRequests}`);
        console.log(`- Temps moyen: ${finalStatus.metrics.averageProcessingTime.toFixed(1)}ms`);
        console.log(`- Taux de succ√®s: ${((finalStatus.metrics.successfulRequests / finalStatus.metrics.totalRequests) * 100).toFixed(1)}%`);
        
        console.log('\nüéâ TESTS TERMIN√âS AVEC SUCC√àS');
        console.log('‚úÖ Syst√®me multi-agent fonctionnel');
        console.log('üîí S√©paration MOSAICMIND respect√©e');
        
        return true;
        
    } catch (error) {
        console.error('\n‚ùå ERREUR LORS DES TESTS:', error);
        console.error('Stack trace:', error.stack);
        return false;
    }
}

// Test individuel des agents
async function testIndividualAgents() {
    console.log('\nüîß TESTS INDIVIDUELS DES AGENTS');
    console.log('=' .repeat(40));
    
    try {
        const PromptRefinementAgent = require('./agents/PromptRefinementAgent');
        const CollectionAgent = require('./agents/CollectionAgent');
        const SynthesisAgent = require('./agents/SynthesisAgent');
        
        // Test PromptRefinementAgent
        console.log('\n1. Test PromptRefinementAgent:');
        const promptAgent = new PromptRefinementAgent();
        const refinedResult = await promptAgent.refinePrompt(
            "Cr√©er une API REST",
            { userLevel: 'intermediate' }
        );
        console.log(`‚úÖ Prompt affin√©: "${refinedResult.refined.substring(0, 80)}..."`);
        console.log(`‚úÖ Sous-prompts g√©n√©r√©s: ${refinedResult.subPrompts.length}`);
        
        // Test CollectionAgent avec donn√©es simul√©es
        console.log('\n2. Test CollectionAgent:');
        const collectionAgent = new CollectionAgent();
        const simulatedData = [
            {
                sourceId: 'test_source_1',
                sourceType: 'test',
                data: 'Donn√©es de test pour la collecte',
                confidence: 0.8,
                metadata: { test: true }
            },
            {
                sourceId: 'test_source_2',
                sourceType: 'test',
                data: 'Autres donn√©es de test',
                confidence: 0.6,
                metadata: { test: true }
            }
        ];
        
        const collectedResult = await collectionAgent.collectAndAggregate(
            refinedResult,
            simulatedData
        );
        console.log(`‚úÖ Sources collect√©es: ${collectedResult.metrics.successfulCollections}`);
        console.log(`‚úÖ Confiance globale: ${(collectedResult.collectedData.metadata.confidence * 100).toFixed(1)}%`);
        
        // Test SynthesisAgent
        console.log('\n3. Test SynthesisAgent:');
        const synthesisAgent = new SynthesisAgent();
        const synthesisResult = await synthesisAgent.synthesize(
            collectedResult,
            refinedResult
        );
        console.log(`‚úÖ R√©ponse g√©n√©r√©e: ${synthesisResult.response.length} caract√®res`);
        console.log(`‚úÖ Score qualit√©: ${(synthesisResult.quality.score * 100).toFixed(1)}%`);
        console.log(`‚úÖ Contr√¥les qualit√©: ${synthesisResult.quality.passed ? 'PASS√âS' : '√âCHOU√âS'}`);
        
        console.log('\n‚úÖ Tous les agents individuels fonctionnent correctement');
        return true;
        
    } catch (error) {
        console.error('\n‚ùå ERREUR LORS DES TESTS INDIVIDUELS:', error);
        return false;
    }
}

// Ex√©cution des tests
async function runAllTests() {
    console.log('üöÄ D√âMARRAGE DES TESTS COMPLETS DU SYST√àME MULTI-AGENT');
    console.log('üîí RAPPEL: SYST√àME STRICTEMENT S√âPAR√â DE MOSAICMIND');
    console.log('=' .repeat(60));
    
    let allTestsPassed = true;
    
    // Tests individuels
    const individualTestsResult = await testIndividualAgents();
    allTestsPassed = allTestsPassed && individualTestsResult;
    
    // Tests d'int√©gration
    const integrationTestsResult = await testMultiAgentSystem();
    allTestsPassed = allTestsPassed && integrationTestsResult;
    
    console.log('\n' + '=' .repeat(60));
    if (allTestsPassed) {
        console.log('üéâ TOUS LES TESTS R√âUSSIS');
        console.log('‚úÖ Syst√®me multi-agent op√©rationnel');
        console.log('‚úÖ Tous les agents fonctionnent correctement');
        console.log('‚úÖ Orchestration compl√®te valid√©e');
        console.log('üîí S√©paration MOSAICMIND strictement respect√©e');
    } else {
        console.log('‚ùå CERTAINS TESTS ONT √âCHOU√â');
        console.log('‚ö†Ô∏è V√©rifier les logs d\'erreur ci-dessus');
    }
    
    return allTestsPassed;
}

// Ex√©cution si ce fichier est appel√© directement
if (require.main === module) {
    runAllTests()
        .then(success => {
            process.exit(success ? 0 : 1);
        })
        .catch(error => {
            console.error('Erreur fatale:', error);
            process.exit(1);
        });
}

module.exports = {
    testMultiAgentSystem,
    testIndividualAgents,
    runAllTests
};