#!/usr/bin/env node

/**
 * Multi-Agent Liaison Application
 * ATTENTION: NE JAMAIS MELANGER AVEC MOSAICMIND
 * 
 * Cette application doit rester compl√®tement s√©par√©e de MOSAICMIND
 */

const fs = require('fs');
const path = require('path');

class MultiAgentLiaison {
    constructor() {
        this.config = this.loadConfig();
        this.validateSeparation();
    }

    loadConfig() {
        try {
            const configPath = path.join(__dirname, 'config.json');
            const configData = fs.readFileSync(configPath, 'utf8');
            return JSON.parse(configData);
        } catch (error) {
            console.error('Erreur lors du chargement de la configuration:', error);
            process.exit(1);
        }
    }

    validateSeparation() {
        console.log('üîí VALIDATION DE LA S√âPARATION AVEC MOSAICMIND');
        console.log('=' .repeat(50));

        if (!this.config.application.separation.enforce_separation) {
            console.error('‚ùå ERREUR: La s√©paration avec MOSAICMIND n\'est pas activ√©e!');
            process.exit(1);
        }

        // V√©rifier qu'aucune d√©pendance MOSAICMIND n'est pr√©sente
        this.checkForMosaicMindDependencies();

        console.log('‚úÖ Validation r√©ussie: Application correctement s√©par√©e de MOSAICMIND');
        console.log('‚ö†Ô∏è  RAPPEL: NE JAMAIS M√âLANGER AVEC MOSAICMIND');
        console.log('');
    }

    checkForMosaicMindDependencies() {
        const blockedIntegrations = this.config.application.separation.blocked_integrations;
        
        // V√©rifier package.json pour des d√©pendances interdites
        try {
            const packagePath = path.join(__dirname, 'package.json');
            if (fs.existsSync(packagePath)) {
                const packageData = JSON.parse(fs.readFileSync(packagePath, 'utf8'));
                const dependencies = {
                    ...packageData.dependencies,
                    ...packageData.devDependencies,
                    ...packageData.peerDependencies
                };

                for (const dep in dependencies) {
                    for (const blocked of blockedIntegrations) {
                        if (dep.toLowerCase().includes(blocked.toLowerCase())) {
                            console.error(`‚ùå ERREUR: D√©pendance interdite d√©tect√©e: ${dep}`);
                            console.error(`   Cette d√©pendance est li√©e √† ${blocked} qui est INTERDIT!`);
                            process.exit(1);
                        }
                    }
                }
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è  Impossible de v√©rifier package.json:', error.message);
        }

        console.log('‚úì Aucune d√©pendance MOSAICMIND d√©tect√©e');
    }

    start() {
        console.log('üöÄ D√âMARRAGE DE L\'APPLICATION MULTI-AGENT LIAISON');
        console.log('=' .repeat(50));
        console.log(`üìã Application: ${this.config.application.name}`);
        console.log(`üìã Version: ${this.config.application.version}`);
        console.log(`üìã Description: ${this.config.application.description}`);
        console.log('');
        console.log('üîê MODE DE S√âPARATION STRICT ACTIV√â');
        console.log('‚ö†Ô∏è  CETTE APPLICATION NE DOIT JAMAIS √äTRE M√âLANG√âE AVEC MOSAICMIND');
        console.log('');
        console.log('‚úÖ Application pr√™te √† fonctionner en mode s√©par√©');
    }

    displaySeparationWarning() {
        console.log('');
        console.log('‚ö†Ô∏è' .repeat(20));
        console.log('  ATTENTION - S√âPARATION STRICTE REQUISE');
        console.log('  NE JAMAIS M√âLANGER AVEC MOSAICMIND');
        console.log('  Cette application doit rester compl√®tement s√©par√©e');
        console.log('‚ö†Ô∏è' .repeat(20));
        console.log('');
    }
}

// Point d'entr√©e principal
if (require.main === module) {
    const app = new MultiAgentLiaison();
    app.displaySeparationWarning();
    app.start();
}

module.exports = MultiAgentLiaison;