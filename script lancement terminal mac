#!/bin/bash
# üöÄ Script de lancement Mosaic Agent avec gestion d'erreurs

set -e  # Arr√™ter si erreur

echo "ü§ñ D√©marrage de Mosaic Agent..."

# Variables
REPO_DIR="mosaic-agent"
FLASK_PORT=5000
OLLAMA_PORT=11434

# Fonction pour v√©rifier si un port est occup√©
check_port() {
    lsof -i :$1 > /dev/null 2>&1
}

# Arr√™ter les processus existants
cleanup() {
    echo "üßπ Nettoyage des processus existants..."
    pkill -f "python app.py" 2>/dev/null || true
    pkill -f "python -m http.server" 2>/dev/null || true
}

# Cloner le repo si n√©cessaire
if [ ! -d "$REPO_DIR" ]; then
    echo "üì• Clonage du repository..."
    git clone https://github.com/avantgardepreparations-ops/mosaic-agent.git
fi

cd "$REPO_DIR"

# Installer les d√©pendances
echo "üì¶ Installation des d√©pendances..."
pip install -r requirements.txt 2>/dev/null || {
    echo "‚ö†Ô∏è Erreur avec requirements.txt, installation manuelle..."
    pip install flask flask-cors requests
}

# V√©rifier Ollama
if ! command -v ollama &> /dev/null; then
    echo "ü¶ô Installation d'Ollama..."
    if [[ "$OSTYPE" == "darwin"* ]]; then
        brew install ollama
    else
        curl -fsSL https://ollama.ai/install.sh | sh
    fi
fi

# D√©marrer Ollama si pas d√©j√† lanc√©
if ! check_port $OLLAMA_PORT; then
    echo "üöÄ D√©marrage d'Ollama..."
    ollama serve > /tmp/ollama.log 2>&1 &
    sleep 3
else
    echo "‚úÖ Ollama d√©j√† en cours d'ex√©cution"
fi

# T√©l√©charger le mod√®le si n√©cessaire
echo "üì• V√©rification du mod√®le..."
ollama list | grep -q tinyllama || ollama pull tinyllama:1.1b

# Cr√©er app.py minimal si absent
if [ ! -f "app.py" ]; then
    echo "üìù Cr√©ation d'un app.py minimal..."
    cat > app.py << 'EOF'
from flask import Flask, jsonify, request, send_from_directory
from flask_cors import CORS
import requests
import os

app = Flask(__name__)
CORS(app)

@app.route('/')
def index():
    if os.path.exists('index.html'):
        return send_from_directory('.', 'index.html')
    return jsonify({"status": "Mosaic Agent API Running"})

@app.route('/api/health')
def health():
    return jsonify({"status": "healthy", "service": "mosaic-agent"})

@app.route('/api/chat', methods=['POST'])
def chat():
    data = request.json
    message = data.get('message', '')
    
    # Proxy vers Ollama
    ollama_response = requests.post(
        'http://localhost:11434/api/generate',
        json={
            'model': 'tinyllama:1.1b',
            'prompt': message,
            'stream': False
        }
    )
    
    if ollama_response.status_code == 200:
        return jsonify(ollama_response.json())
    return jsonify({"error": "Ollama error"}), 500

if __name__ == '__main__':
    print("üåê Flask server starting on http://localhost:5000")
    app.run(debug=True, host='0.0.0.0', port=5000)
EOF
fi

# Nettoyer avant de d√©marrer
cleanup

# D√©marrer Flask
echo "üåê Lancement du backend Flask..."
python app.py > /tmp/flask.log 2>&1 &
FLASK_PID=$!

# Attendre que Flask d√©marre
echo "‚è≥ Attente du d√©marrage de Flask..."
for i in {1..10}; do
    if curl -s http://localhost:$FLASK_PORT/api/health > /dev/null; then
        echo "‚úÖ Flask d√©marr√© avec succ√®s"
        break
    fi
    sleep 1
done

# Cr√©er index.html minimal si absent
if [ ! -f "index.html" ]; then
    echo "üìù Cr√©ation d'un index.html minimal..."
    cat > index.html << 'EOF'
<!DOCTYPE html>
<html>
<head>
    <title>Mosaic Agent</title>
    <style>
        body { font-family: Arial; padding: 20px; background: #1a1a2e; color: white; }
        .container { max-width: 800px; margin: auto; }
        #chat { border: 1px solid #444; padding: 10px; height: 400px; overflow-y: auto; background: #16213e; }
        input { width: 70%; padding: 10px; margin: 10px 0; }
        button { padding: 10px 20px; background: #0f3460; color: white; border: none; cursor: pointer; }
    </style>
</head>
<body>
    <div class="container">
        <h1>ü§ñ Mosaic Agent</h1>
        <div id="chat"></div>
        <input type="text" id="message" placeholder="Tapez votre message...">
        <button onclick="sendMessage()">Envoyer</button>
    </div>
    <script>
        async function sendMessage() {
            const input = document.getElementById('message');
            const chatDiv = document.getElementById('chat');
            const message = input.value;
            
            chatDiv.innerHTML += `<p><b>Vous:</b> ${message}</p>`;
            input.value = '';
            
            try {
                const response = await fetch('http://localhost:5000/api/chat', {
                    method: 'POST',
                    headers: {'Content-Type': 'application/json'},
                    body: JSON.stringify({message: message})
                });
                const data = await response.json();
                chatDiv.innerHTML += `<p><b>Agent:</b> ${data.response || 'R√©ponse re√ßue'}</p>`;
            } catch (error) {
                chatDiv.innerHTML += `<p><b>Erreur:</b> ${error.message}</p>`;
            }
        }
    </script>
</body>
</html>
EOF
fi

# Ouvrir l'interface
echo "üéØ Ouverture de l'interface web..."
open index.html 2>/dev/null || xdg-open index.html 2>/dev/null || echo "Ouvrez http://localhost:$FLASK_PORT"

# Afficher le statut
echo ""
echo "‚úÖ Mosaic Agent op√©rationnel !"
echo "üìç Interface web : http://localhost:$FLASK_PORT"
echo "ü¶ô Ollama API : http://localhost:$OLLAMA_PORT"
echo ""
echo "üìä Processus actifs :"
ps aux | grep -E "python app.py|ollama" | grep -v grep

# Afficher les logs en temps r√©el
echo ""
echo "üìú Logs Flask :"
tail -f /tmp/flask.log
